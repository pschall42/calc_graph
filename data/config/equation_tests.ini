;;;; Literals
; infinity
; pi
; e
; phi


;;;; List Operations
; MAP(<list>.<element_propery>, missing: <number>, ignore_missing: <bool>)
; SUM(<list>.<element_propery>, missing: <number>, ignore_missing: <bool>)
; MULT(<list>.<element_propery>, missing: <number>, ignore_missing: <bool>)
; MAX(<list>.<element_propery>, missing: <number>, ignore_missing: <bool>)
; MIN(<list>.<element_propery>, missing: <number>, ignore_missing: <bool>)
; MEAN(<list>.<element_propery>, missing: <number>, ignore_missing: <bool>)
; AVG(<list>.<element_propery>, missing: <number>, ignore_missing: <bool>)
; MEDIAN(<list>.<element_propery>, missing: <number>, ignore_missing: <bool>)
; MODE(<list>.<element_propery>, missing: <number>, ignore_missing: <bool>)
; RANGE(<list>.<element_propery>, missing: <number>, ignore_missing: <bool>)

;;;; Variatic Argument Operations
; MAX(<value1>, <value2>, ..., <valuen>)
; MIN(<value1>, <value2>, ..., <valuen>)
; MEAN(<value1>, <value2>, ..., <valuen>)
; AVG(<value1>, <value2>, ..., <valuen>)
; MEDIAN(<value1>, <value2>, ..., <valuen>)
; MODE(<value1>, <value2>, ..., <valuen>)
; RANGE(<value1>, <value2>, ..., <valuen>)


; ABS(<value>)
; ROUND(<value>)
; CEIL(<value>)
; FLOOR(<value>)
; TRUNCATE(<value>)
; CLAMP(<value1>, <value2>, <value3>)
; ROOT(<root>, <value>)                          -- should be <root>ROOT<value>  ??

;;;; Logarithms
; LOG(<value>)
; LN(<value>)
; LOG<base>(<value>)

;;;; Trig Operations
; SIN(<value>)
; COS(<value>)
; TAN(<value>)
; ARCSIN(<value>)
; ARCCOS(<value>)
; ARCTAN(<value>)
; SINH(<value>)
; COSH(<value>)
; TANH(<value>)
; ARCSINH(<value>)
; ARCCOSH(<value>)
; ARCTANH(<value>)



; 30 total operations, 7 have multiple possible operations, 2 have aliases (MEAN -> AVG and FLOOR -> TRUNCATE)


[Testing]
;Tests    = TST_Constants # TST_MathOperators # TST_Variables # TST_Expressions #
;           TST_VariadicOperations # TST_ListOperations #
;           TST_LogarithmicOperations # TST_TrigonometryOperations # TST_GenericOperations
;Expected = EXP_Constants # EXP_MathOperators # EXP_Variable # EXP_Expressions #
;           EXP_VariadicOperations # EXP_ListOperations #
;           EXP_LogarithmicOperations # EXP_TrigonometryOperations # EXP_GenericOperations
Tests    = TST_Constants # TST_MathOperators # TST_Variables # TST_Expressions
Expected = EXP_Constants # EXP_MathOperators # EXP_Variables # EXP_Expressions



[TST_Constants]
aa = 1
ab = 4.2
ac = -2
ad = -5.7
ae = 0
af = 0.1122345
ag = 0.0000001
ah = infinity
ai = -infinity
aj = nan
[EXP_Constants]
aa = 1
ab = 4.2
ac = -2
ad = -5.7
ae = 0
af = 0.1122345
ag = 0.0000001
ah = infinity
ai = -infinity
aj = nan

[TST_MathOperators]
aa = 1 + 2
ab = 5 - 7
ac = 8 * 4
ad = 12 / 4
ae = 2 ^ 3
af = 9 ^ -2
ag = 1.5 + 3.7
ah = 5.2 - 7.9
ai = 4.2 * 6.3
aj = 3.1 / 5.6
ak = 4.3 ^ 3.7
al = 6.2 ^ -2
[EXP_MathOperators]
aa = 3           ; 1 + 2
ab = -2          ; 5 - 7
ac = 32          ; 8 * 4
ad = 3           ; 12 / 4
ae = 8           ; 2 ^ 3
af = 3           ; 9 ^ -2
ag = 5.2         ; 1.5 + 3.7
ah = -2.7        ; 5.2 - 7.9
ai = 26.46       ; 4.2 * 6.3
aj = .5535714286 ; 3.1 / 5.6
ak = 220.71573   ; 4.3 ^ 3.7
al = .0260145682 ; 6.2 ^ -2

[TST_Variables]
; Deep dependencies, mixed to be out of order
aa = 5
; /
bh = -bg / -ba
bc = bb / 9
bb = 3 / ba
bf = -bd / be
bd = -4 / ba
be = bb / -3
bg = bf / -bb
ba = ay / az
; -
ao = al - -3
al = 3 - ak
am = al - 9
aq = ap - -al
an = -4 - ak
ap = -an - ao
ak = ai - aj
ar = -aq - -ak
; *
az = -ay * -as
as = aq * ar
aw = at * -3
av = -4 * as
ax = -av * aw
at = 3 * as
au = at * 9
ay = ax * -at
; +
af = -4 + ac
ac = aa + ab
ad = 3 + ac
ag = ad + -3
aj = -ai + -ac
ah = -af + ag
ai = ah + -ad
ae = ad + 9

ab = 6
[EXP_Variables]
aa = 5           ; 5
; /
bh = 1.333333333 ; -bg / -ba => (4 / 3)
bc = 2.666666667 ; bb / 9    => (8 / 3)
bb = 24          ; 3 / ba
bf = -4          ; -bd / be
bd = -32         ; -4 / ba
be = -8          ; bb / -3
bg = .1666666667 ; bf / -bb  => (1 / 6)
ba = .125        ; ay / az
; -
ao = 15          ; al - -3
al = 12          ; 3 - ak
am = 3           ; al - 9
aq = -8          ; ap - -al
an = 5           ; -4 - ak
ap = -20         ; -an - ao
ak = -9          ; ai - aj
ar = -1          ; -aq - -ak
; *
az = 442368      ; -ay * -as
as = 8           ; aq * ar
aw = -72         ; at * -3
av = -32         ; -4 * as
ax = -2304       ; -av * aw
at = 24          ; 3 * as
au = 216         ; at * 9
ay = 55296       ; ax * -at
; +
af = 7           ; -4 + ac
ac = 11          ; aa + ab
ad = 14          ; 3 + ac
ag = 11          ; ad + -3
aj = -1          ; -ai + -ac
ah = 4           ; -af + ag
ai = -10         ; ah + -ad
ae = 23          ; ad + 9

ab = 6           ; 6

[TST_Expressions]
aa = 2 + 3 + 4
ab = 2 - 3 - 4
ac = 2 * 3 * 4
ad = 12 / 3 / 2
ae = 2 ^ 3 ^ 2
af = (2 ^ 3) ^ 2
ag = 2 + 3 * 4 - 1
ah = (2 + 3) * (4 - 1)
ai = 2 + 3 * (4 - 1)
aj = 4 ^ 2 - 4 / 2
ak = 3 * 4 ^ 4 / 2
al = (3 * 4) ^ 4 / 2
am = 3 * 4 ^ (4 / 2)
an = (3 * 4) ^ (4 / 2)
ao = 2 + 3 * 6 - 8 / 4
ap = (2 + 3) * 6 - 8 / 4
aq = 2 + 3 * (6 - 8) / 4
ar = 2 + (3 * 6) - (8 / 4)
as = 2 + 3 * (6 - 8 / 4)
at = 5 + 3 * 6 - 32 / 4 ^ 2
au = (5 + 3) * 6 - 32 / 4 ^ 2
av = 5 + 3 * (6 - 32) / 4 ^ 2
aw = 5 + 3 * 6 - (32 / 4) ^ 2
ax = (5 + 3 * 6 - 32 / 4) ^ 2
ay = -2 + -3 + -4
az = -2 - -3 - -4
ba = -2 * -3 * -4
bb = -12 / -3 / -2
bc = -2 ^ -3 ^ -2
bd = (-2 ^ -3) ^ -2
be = -(-2 ^ -3) ^ -4
bf = -2 + -3 * -4 - -1
bg = (-2 + -3) * (-4 - -1)
bh = (-2 + -3) * -(-4 - -1)
bi = -(-2 + -3) * (-4 - -1)
bj = -(-2 + -3) * -(-4 - -1)
bk = -2 + -3 * (-4 - -1)
bl = -2 + -3 * -(-4 - -1)
bm = -4 ^ -2 - -4 / -2
bn = -3 * -4 ^ -4 / -2
bo = (-3 * -4) ^ -4 / -2
bp = -(-3 * -4) ^ -4 / -2
bq = -3 * -4 ^ (-4 / -2)
br = -3 * -4 ^ -(-4 / -2)
bs = (-3 * -4) ^ (-4 / -2)
bt = (-3 * -4) ^ -(-4 / -2)
bu = -(-3 * -4) ^ (-4 / -2)
bv = -(-3 * -4) ^ -(-4 / -2)
bw = -2 + -3 * -6 - -8 / -4
bx = (-2 + -3) * -6 - -8 / -4
by = -(-2 + -3) * -6 - -8 / -4
bz = -2 + -3 * (-6 - -8) / -4
ca = -2 + -3 * -(-6 - -8) / -4
cb = -2 + (-3 * -6) - (-8 / -4)
cc = -2 + (-3 * -6) - -(-8 / -4)
cd = -2 + -(-3 * -6) - (-8 / -4)
ce = -2 + -(-3 * -6) - -(-8 / -4)
cf = -2 + -3 * (-6 - -8 / -4)
cg = -2 + -3 * -(-6 - -8 / -4)
ch = -5 + -3 * -6 - -32 / -4 ^ -2
ci = (-5 + -3) * -6 - -32 / -4 ^ -2
cj = -(-5 + -3) * -6 - -32 / -4 ^ -2
ck = -5 + -3 * (-6 - -32) / -4 ^ -2
cl = -5 + -3 * -(-6 - -32) / -4 ^ -2
cm = -5 + -3 * -6 - (-32 / -4) ^ -2
cn = -5 + -3 * -6 - -(-32 / -4) ^ -2
co = (-5 + -3 * -6 - -32 / -4) ^ -2
cp = -(-5 + -3 * -6 - -32 / -4) ^ -2
[EXP_Expressions]
aa = 9           ; 2 + 3 + 4
ab = -5          ; 2 - 3 - 4
ac = 24          ; 2 * 3 * 4
ad = 2           ; 12 / 3 / 2
ae = 512         ; 2 ^ 3 ^ 2
af = 64          ; (2 ^ 3) ^ 2
ag = 13          ; 2 + 3 * 4 - 1
ah = 15          ; (2 + 3) * (4 - 1)
ai = 11          ; 2 + 3 * (4 - 1)
aj = 14          ; 4 ^ 2 - 4 / 2
ak = 384         ; 3 * 4 ^ 4 / 2
al = 10368       ; (3 * 4) ^ 4 / 2
am = 48          ; 3 * 4 ^ (4 / 2)
an = 144         ; (3 * 4) ^ (4 / 2)
ao = 18          ; 2 + 3 * 6 - 8 / 4
ap = 28          ; (2 + 3) * 6 - 8 / 4
aq = .5          ; 2 + 3 * (6 - 8) / 4
ar = 18          ; 2 + (3 * 6) - (8 / 4)
as = 14          ; 2 + 3 * (6 - 8 / 4)
at = 21          ; 5 + 3 * 6 - 32 / 4 ^ 2
au = 46          ; (5 + 3) * 6 - 32 / 4 ^ 2
av = .125        ; 5 + 3 * (6 - 32) / 4 ^ 2
aw = -41         ; 5 + 3 * 6 - (32 / 4) ^ 2
ax = 225         ; (5 + 3 * 6 - 32 / 4) ^ 2
ay = -9          ; -2 + -3 + -4
az = 5           ; -2 - -3 - -4
ba = -24         ; -2 * -3 * -4
bb = -2          ; -12 / -3 / -2
bc = −.925874712 ; -2 ^ -3 ^ -2
bd = 64          ; (-2 ^ -3) ^ -2
be = −4096       ; -(-2 ^ -3) ^ -4
bf = 11          ; -2 + -3 * -4 - -1
bg = 15          ; (-2 + -3) * (-4 - -1)
bh = -15         ; (-2 + -3) * -(-4 - -1)
bi = -15         ; -(-2 + -3) * (-4 - -1)
bj = 15          ; -(-2 + -3) * -(-4 - -1)
bk = 7           ; -2 + -3 * (-4 - -1)
bl = 11          ; -2 + -3 * -(-4 - -1)
bm = −2.0625     ; -4 ^ -2 - -4 / -2
bn = −.005859375 ; -3 * -4 ^ -4 / -2
bo = −.000024113 ; (-3 * -4) ^ -4 / -2
bp = .000024113  ; -(-3 * -4) ^ -4 / -2
bq = 48          ; -3 * -4 ^ (-4 / -2)
br = .1875       ; -3 * -4 ^ -(-4 / -2)
bs = 144         ; (-3 * -4) ^ (-4 / -2)
bt = .006944444  ; (-3 * -4) ^ -(-4 / -2)
bu = -144        ; -(-3 * -4) ^ (-4 / -2)
bv = −.006944444 ; -(-3 * -4) ^ -(-4 / -2)
bw = 14          ; -2 + -3 * -6 - -8 / -4
bx = 28          ; (-2 + -3) * -6 - -8 / -4
by = -32         ; -(-2 + -3) * -6 - -8 / -4
bz = −.5         ; -2 + -3 * (-6 - -8) / -4
ca = −3.5        ; -2 + -3 * -(-6 - -8) / -4
cb = 14          ; -2 + (-3 * -6) - (-8 / -4)
cc = 18          ; -2 + (-3 * -6) - -(-8 / -4)
cd = -22         ; -2 + -(-3 * -6) - (-8 / -4)
ce = -18         ; -2 + -(-3 * -6) - -(-8 / -4)
cf = 22          ; -2 + -3 * (-6 - -8 / -4)
cg = -26         ; -2 + -3 * -(-6 - -8 / -4)
ch = -499        ; -5 + -3 * -6 - -32 / -4 ^ -2
ci = −464        ; (-5 + -3) * -6 - -32 / -4 ^ -2
cj = −560        ; -(-5 + -3) * -6 - -32 / -4 ^ -2
ck = 1243        ; -5 + -3 * (-6 - -32) / -4 ^ -2
cl = −1253       ; -5 + -3 * -(-6 - -32) / -4 ^ -2
cm = 12.984375   ; -5 + -3 * -6 - (-32 / -4) ^ -2
cn = 13.015625   ; -5 + -3 * -6 - -(-32 / -4) ^ -2
co = .04         ; (-5 + -3 * -6 - -32 / -4) ^ -2
cp = −.04        ; -(-5 + -3 * -6 - -32 / -4) ^ -2




; MAX, MIN, MEAN, AVG, MEDIAN, MODE, RANGE
[TST_VariadicOperations]

; MAP, SUM, MULT, MAX, MIN, MEAN, AVG, MEDIAN, MODE, RANGE
[TST_ListOperations]

; LOG, LN
[TST_LogarithmicOperations]

; SIN, COS, TAN, ARCSIN, ARCCOS, ARCTAN, SINH, COSH, TANH, ARCSINH, ARCCOSH, ARCTANH
[TST_TrigonometryOperations]

; ABS, ROUND, CEIL, FLOOR, TRUNCATE, CLAMP, ROOT
[TST_GenericOperations]
aa = ABS(15)
ab = ABS(-4)
ac = ROUND(14.2458)
ad = ROUND(14.2458, 2)
ae = ROUND(41.5319)
af = ROUND(41.5319, 1)
ag = ROUND(-5.3198)
ah = ROUND(-5.3198, 2)
ai = ROUND(-26.9815)
aj = ROUND(-26.9815, 3)
ak = CEIL(14.2468)
al = CEIL(14.2468, 2)
am = CEIL(41.5319)
an = CEIL(41.5319, 1)
ao = CEIL(-5.3198)
ap = CEIL(-5.3198, 2)
aq = CEIL(-26.9815)
ar = CEIL(-26.9815, 3)
as = FLOOR(14.2468)
at = FLOOR(14.2468, 2)
au = FLOOR(41.5319)
av = FLOOR(41.5319, 1)
aw = FLOOR(-5.3198)
ax = FLOOR(-5.3198, 2)
ay = FLOOR(-26.9815)
az = FLOOR(-26.9815, 3)
ba = TRUNCATE(14.2468)
bb = TRUNCATE(14.2468, 2)
bc = TRUNCATE(41.5319)
bd = TRUNCATE(41.5319, 1)
be = TRUNCATE(-5.3198)
bf = TRUNCATE(-5.3198, 2)
bg = TRUNCATE(-26.9815)
bh = TRUNCATE(-26.9815, 3)
bi = CLAMP(0, 100, 32)
bj = CLAMP(0, 100, 100)
bk = CLAMP(0, 100, 150)
bl = CLAMP(0, 100, 0)
bm = CLAMP(0, 100, -15)
bo = CLAMP(-10, 10, 6)
bp = CLAMP(-10, 10, -10)
bq = CLAMP(-10, 10, 15)
br = CLAMP(-10, 10, -200)
bs = CLAMP(-infinity, infinity, 42)
bt = CLAMP(-infinity, infinity, 0)
bu = CLAMP(-infinity, infinity, infinity)
bv = CLAMP(-infinity, infinity, -infinity)
bw = ROOT2(25)
bx = ROOT3(74088)
by = ROOT4(39.0625)
bz = ROOT10(1024)
[EXP_GenericOperations]
aa = 15        ; ABS(15)
ab = 4         ; ABS(-4)
ac = 14        ; ROUND(14.2458)
ad = 14.25     ; ROUND(14.2458, 2)
ae = 42        ; ROUND(41.5319)
af = 41.5      ; ROUND(41.5319, 1)
ag = -5        ; ROUND(-5.3198)
ah = -5.32     ; ROUND(-5.3198, 2)
ai = -27       ; ROUND(-26.9815)
aj = -26.982   ; ROUND(-26.9815, 3)
ak = 15        ; CEIL(14.2468)
al = 14.25     ; CEIL(14.2468, 2)
am = 42        ; CEIL(41.5319)
an = 41.6      ; CEIL(41.5319, 1)
ao = -5        ; CEIL(-5.3198)
ap = -5.31     ; CEIL(-5.3198, 2)
aq = -26       ; CEIL(-26.9815)
ar = -26.981   ; CEIL(-26.9815, 3)
as = 14        ; FLOOR(14.2468)
at = 14.24     ; FLOOR(14.2468, 2)
au = 41        ; FLOOR(41.5319)
av = 41.5      ; FLOOR(41.5319, 1)
aw = -6        ; FLOOR(-5.3198)
ax = -5.32     ; FLOOR(-5.3198, 2)
ay = -27       ; FLOOR(-26.9815)
az = -26.982   ; FLOOR(-26.9815, 3)
ba = 14        ; TRUNCATE(14.2468)
bb = 14.24     ; TRUNCATE(14.2468, 2)
bc = 41        ; TRUNCATE(41.5319)
bd = 41.5      ; TRUNCATE(41.5319, 1)
be = -5        ; TRUNCATE(-5.3198)
bf = -5.31     ; TRUNCATE(-5.3198, 2)
bg = -26       ; TRUNCATE(-26.9815)
bh = -26.981   ; TRUNCATE(-26.9815, 3)
bi = 32        ; CLAMP(0, 100, 32)
bj = 100       ; CLAMP(0, 100, 100)
bk = 100       ; CLAMP(0, 100, 150)
bl = 0         ; CLAMP(0, 100, 0)
bm = 0         ; CLAMP(0, 100, -15)
bo = 6         ; CLAMP(-10, 10, 6)
bp = -10       ; CLAMP(-10, 10, -10)
bq = 10        ; CLAMP(-10, 10, 15)
br = -10       ; CLAMP(-10, 10, -200)
bs = 42        ; CLAMP(-infinity, infinity, 42)
bt = 0         ; CLAMP(-infinity, infinity, 0)
bu = infinity  ; CLAMP(-infinity, infinity, infinity)
bv = -infinity ; CLAMP(-infinity, infinity, -infinity)
bw = 5         ; ROOT2(25)
bx = 42        ; ROOT3(74088)
by = 2.5       ; ROOT4(39.0625)
bz = 2         ; ROOT10(1024)






[Test1Defaults]
a = 0
b = 0
c = 0

[Test1]
Inputs = a # b # c # d
Defaults = StatGraphDefaults
w = SUM(x, y, z)
x = a + b + c`
y = b - c
z = x * y





[TST_Actual]
assoc1 = 2 ^ 3 ^ 2
assoc2 = (2 ^ 3) ^ 2
assoc3 = 5 - 3 - 2
assoc4 = 5 - (3 - 2)
inf = infinity * e ^ pi
asdf = e * pi * phi
func = SUM(4, 2, 3)
func2 = 5 * 4 - SUM(4, 2 - 1, 3 * 4) / 4 + 16 - 3 ^ 4 - 1
blah = this + is - a * test / of ^ the - (emergency - broadcast) * system
hah = this + is - a * test / of ^ the - emergency - broadcast * system
total_strength = ((base_strength * base_mult_strength) + (equipment_mod_strength * equipment_mod_mult_strength) + (temporary_mod_strength * temporary_mod_mult_strength)) * total_mult_strength
base_mult_strength = 1

total_coordination = ((base_coordination * base_mult_coordination) + (equipment_mod_coordination * equipment_mod_mult_coordination) + (temporary_mod_coordination * temporary_mod_mult_coordination)) * total_mult_coordination
base_mult_coordination = 1

test = ((base_coordination * base_mult_coordination) + (equipment_mod_coordination * equipment_mod_mult_coordination) + (temporary_mod_coordination * temporary_mod_mult_coordination)) * total_mult_coordination ^ ((base_strength * base_mult_strength) + (equipment_mod_strength * equipment_mod_mult_strength) + (temporary_mod_strength * temporary_mod_mult_strength)) * total_mult_strength * this + is - a * test / of ^ the - (emergency - broadcast) * system

