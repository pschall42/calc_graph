;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This file contains sample usage for both forms ;
;        of the Solver (solver and update)       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Conventions:
;   Dynamic/Runtime -> snake_case
;   Expected Solver -> TitleCase

;[SolverTemplate]
;Type      -> the type of Solver it is, can be one of either 'solver' or 'update', defaulting to 'solver'
;Defaults  -> default values of runtime variables if the value either isn't found or is of an incompatible type, if an equation is still unsolvable after using a default, the entire Solver should fail to set any values (the Solver should be atomic)
;Equations -> the list of equations to use for the Solver, so the heart of the DSL

;[ObjectTemplateChanges]
;Solvers   -> the list of Solvers that apply to this object



[Fighter]
Solvers       = SolverExample # UpdateExample
base_hp       = 10
regen_hp      = 1

; Basic Solver mode, this mode requires all equations used to form a DAG, if any loops are detected in the equations, creating the Solver should fail with orxSTATUS_FAILURE
[SolverExample]
Type      = solver
Defaults  = SolverDefaults
Equations = SolverEquations

[SolverDefaults]
base_hp               = 0
base_hp_regen         = 0
regen_hp              = 0
damage_hp             = 0
temporary_modifier_hp = 0
equipment_modifier_hp = 0

[SolverEquations]
max_hp    = base_hp + equipment_modifier_hp
total_hp  = max_hp + temporary_modifier_hp - damage_hp

; Update Solver mode, this mode is already a DAG since it deals with updating values from one point in time to another, so for the example:
;  damage_hp = damage_hp - regen_hp
; is a function with respect time 't' as the current time, so the more precise mathematical definition is:
;  damage_hp[t+1] = damage_hp[t] - regen_hp[t]
[UpdateExample]
Type      = update
Defaults  = SolverDefaults
Equations = UpdateEquations

[UpdateEquations]
damage_hp = damage_hp - regen_hp



[ComplexFighter]
Solvers       = SolverExample # ComplexUpdateExample
base_hp       = 10
base_hp_regen = 1

[ComplexUpdateExample@UpdateExample]
Equations = ComplexUpdateEquations

; We can allow mutual references with this example, because the actual mathematical definition is:
;   damage_hp[t+1] = damage_hp[t] - regen_hp[t]
;   regen_hp[t+1]  = Max(base_regen_hp[t], (damage_hp[t] / 5) - (regen_hp[t] / 2)))
[ComplexUpdateEquations]
damage_hp = damage_hp - regen_hp
regen_hp  = Max(base_regen_hp, (damage_hp / 5) - (regen_hp / 2)))



; This example is invalid entirely because the Solver it uses is the Basic Solver mode, but it uses self referential equations, and therefore isn't a DAG, so the Solver won't actually get stored (returning orxSTATUS_FAILURE on initialization), and any runtime values it has will not be updated
[InvalidFighter@Fighter]
Solvers = InvalidSolver

[InvalidSolver@SolverExample]
Equations = UpdateEquations



; This example has both an invalid Solver and a valid one, the valid Solver will succeed in any updates it makes provided that the runtime values are compatible, while the invalid Solver won't get stored and therefore not update any values
[SemiValidFighter@ComplexFighter]
Solvers = InvalidSolver # ComplexUpdateExample



; This example shows how default values on a Solver should work
[DefaultValuesFighter]
Solvers = SolverExample
base_hp = since this line is a string, the Solver would use the default value for base_hp listed in SolverDefaults



; This example shows how a properly defined Solver should fail to update anything on an Object if it have a number for a value and doesn't have a default to fall back on
[SolverFailsFighter]
Solvers               = PartialSolver
base_hp               = 10
equipment_modifier_hp = 3
max_hp                = 6
damage_hp             = since this line is a string, but the Solver assigned to it does not have a default value for damage_hp, it would fail to change any values even though the value of max_hp can be calculated from the current data

[PartialSolver@SolverExample]
Defaults = PartialDefaults

[PartialDefaults]
base_hp               = 0
temporary_modifier_hp = 0
equipment_modifier_hp = 0



; This example shows how one Solver can be used to allow another Solver to run
[InitialStateFailsFighter@SolverFailsFighter]
Solvers = PartialSolver # UpdateExample
damage_hp = this line is a string, so prevents the PartialSolver from changing any values made to it as before since it did not have any default value for damage_hp, but the update example does have default values for both damage_hp and regen_hp. In this case, UpdateExample resolves first, followed by PartialSolver once new runtime values have been written



; There needs to be a way to resolve Solvers with circular references between each other, in this case each Solver has outputs that are inputs to the other Solver. The best way to resolve this probably is to keep track of all inputs/outputs of each solver, and if such a conflict is discovered, keep the first listed Solver and not attach the later conflicting one. This should be consistent among both
[CircularReferenceFighter@Fighter]
Solvers = SolverExample # ReciprocalEquations

[RearrangedSolver@SolverExample]
Equations = RearrangedEquations

[RearrangedEquations]
base_hp   = max_hp - equipment_modifier_hp
damage_hp = max_hp + temporary_modifier_hp - total_hp



; There also needs to be a way to resolve Solvers with the same outputs. In this case, we would want to keep the other equations, performing a sort of merge between them, which means that if there are 2 or more equations for the same variable between Solvers, it should use the equation of either the first Solver in the list or the last one.
[SameOutputsFighter@Fighter]
Solvers = SolverExample # SimilarOutputsEquations

[SameOutputsSolver@SolverExample]
Equations = SimilarOutputsEquations

[SameOutputsEquations]
max_hp    = base_hp + equipment_modifier_hp + temporary_modifier_hp
total_hp  = max_hp - damage_hp
